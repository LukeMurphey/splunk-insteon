
# prettify_command
# -----------------------------
# Populates the command field with a field based on the message flags and the command field.
#
[prettify_command(1)]
args       = field
definition = | fillnull cmd2 value="" | eval $field$=if(extended=1,"E", "S") | eval $field$=$field$.case(all_link=1,"A", broadcast=1, "B", direct=1, "D") | eval cmd1=if(len(cmd1)==1,"0".cmd1, cmd1) | eval cmd2=if(len(cmd2)==1,"0".cmd2, cmd2) | eval $field$=$field$." 0x".cmd1.cmd2

[prettify_command]
definition = `prettify_command(command)`

# override_empty_command_with_raw
# -----------------------------
# Populates the command field with the custom_command field if defined
#
[override_command_with_custom]
definition =  `use_non_null_field(command,custom_command,command)` 

# override_empty_command_with_raw
# -----------------------------
# Populates the command fields with the raw command if the command field is empty
#
[override_empty_command_with_raw]
definition = `prettify_command(command_raw)` `use_non_null_field(command,command,command_raw)`

# populate_device_name
# -----------------------------
# Defines a field containing the name of the device as labeled by the user or the address if the label is undefined.
#
[populate_device_name(1)]
args       = field
definition = | eval $field$=case(direct=1 AND ack=1,from_device_name,direct=1,to_device_name,direct=0,from_device_name)

[populate_device_name]
definition = `populate_device_name(device_name)`

# populate_device_room
# -----------------------------
# Defines a field containing the room of the device that is the source of the message.
#
[populate_device_room(1)]
args       = field
definition = | eval $field$=case(direct=1 AND ack=1,from_room,direct=1,to_room,direct=0,from_room)

[populate_device_room]
definition = `populate_device_room(room)`

# use_non_null_field
# -----------------------------
# Defines a field containing the first_field if first_field is not null; otherwise, the value is set to second_field
#
[use_non_null_field(3)]
args       = output_field,first_field,second_field
definition = | eval $output_field$=if(isnull($first_field$),$second_field$,$first_field$)

# get_all_link_group_annotation
# -----------------------------
# Get the annotation associated with a particular all-link group
#
[get_all_link_group_annotation(2)]
args       = command,all_link_group
definition = | stats count | eval command="$command$" | eval all_link_group="$all_link_group$" | lookup all_link_annotations command all_link_group OUTPUTNEW device annotation | fields command all_link_group device annotation

# update_all_link_group_annotation
# -----------------------------
# Update the given all-link annotation
#
[update_all_link_group_annotation(3)]
args       = command,all_link_group,annotation
definition = | stats count | eval annotation="$annotation$" | eval command="$command$" | eval device="*" | eval all_link_group="$all_link_group$" | inputlookup append=t all_link_annotations | stats first(annotation) as annotation by command all_link_group device | outputlookup all_link_annotations

# lookup_all_link_group_annotation
# -----------------------------
# Lookup the all-link annotation and output it
#
[lookup_all_link_group_annotation(1)]
args       = output_field
definition = | lookup all_link_annotations device all_link_group command as cmd1 OUTPUTNEW annotation as $output_field$

# populate_field_with_all_link_group_number
# -----------------------------
# populate field with all-link group information
#
[populate_field_with_all_link_group_number(2)]
args       = output_field,default_value_field
definition = | eval $output_field$=if(all_link=1 AND isnull(to),"group: ".all_link_group,$default_value_field$)

[populate_field_with_all_link_group_number]
args       = output_field,default_value_field
definition = `populate_field_with_all_link_group_number(to,to)`

# get_status
# -----------------------------
# populate a field that outlines the status of the event
#
[get_status]
definition = | eval status=case(ack=1,"ack",nack=1,"nack")