# get_command_info
# -----------------------------
# Populates the command field with a field based on the message flags and the command field.
#
[get_command_info(1)]
args       = output_type
definition = | fillnull cmd1 cmd2 all_link_group value="" | lookup insteon_messages category subcategory cmd1 cmd2 broadcast extended all_link all_link_group $output_type$ command | lookup local_insteon_messages device category subcategory cmd1 cmd2 broadcast extended all_link all_link_group $output_type$ command as custom_command, description as command_description

[get_command_info]
definition = `get_command_info(OUTPUTNEW)`

# prettify_command
# -----------------------------
# Populates the command field with a field based on the message flags and the command field.
#
[prettify_command(1)]
args       = field
definition = | fillnull cmd2 value="" | eval $field$=if(extended=1,"E", "S") | eval $field$=$field$.case(all_link=1,"A", broadcast=1, "B", direct=1, "D") `pad_command(cmd1)` `pad_command(cmd2)` | eval $field$=$field$." 0x".cmd1.cmd2

[prettify_command]
definition = `prettify_command(command)`

# override_empty_command_with_raw
# -----------------------------
# Populates the command field with the custom_command field if defined
#
[override_command_with_custom]
definition =  `use_non_null_field(command,custom_command,command)` 

# override_empty_command_with_raw
# -----------------------------
# Populates the command fields with the raw command if the command field is empty
#
[override_empty_command_with_raw]
definition = `prettify_command(command_raw)` `use_non_null_field(command,command,command_raw)`

# override_empty_command_with_modem_command
# -----------------------------
# Populates the command field with the modem command field.
#
[override_empty_command_with_modem_command]
definition =  `use_non_null_field(command,command,modem_command)` 

# populate_device_name
# -----------------------------
# Defines a field containing the name of the device as labeled by the user or the address if the label is undefined.
#
[populate_device_name(1)]
args       = field
definition = | eval $field$=case(direct=1 AND ack=1,from_device_name,direct=1,to_device_name,direct=0,from_device_name)

[populate_device_name]
definition = `populate_device_name(device_name)`

# populate_device_room
# -----------------------------
# Defines a field containing the room of the device that is the source of the message.
#
[populate_device_room(1)]
args       = field
definition = | eval $field$=case(direct=1 AND ack=1,from_room,direct=1,to_room,direct=0,from_room)

[populate_device_room]
definition = `populate_device_room(room)`

# use_non_null_field
# -----------------------------
# Defines a field containing the first_field if first_field is not null; otherwise, the value is set to second_field
#
[use_non_null_field(3)]
args       = output_field,first_field,second_field
definition = | eval $output_field$=if(isnull($first_field$),$second_field$,$first_field$)

# get_all_link_group_annotation
# -----------------------------
# Get the annotation associated with a particular all-link group
#
[get_all_link_group_annotation(4)]
args       = command,all_link_group,from_device,to_device
definition = | stats count | eval command="$command$" `unpad_command(command)` | eval all_link_group="$all_link_group$" | eval from_device="$from_device$" | eval to_device="$to_device$" | lookup all_link_annotations command all_link_group from_device to_device OUTPUTNEW annotation | fields command all_link_group from_device to_device annotation

# update_all_link_group_annotation
# -----------------------------
# Update the given all-link annotation
#
[update_all_link_group_annotation(5)]
args       = command,all_link_group,from_device,to_device,annotation
definition = | stats count | eval annotation="$annotation$" | eval command="$command$" `unpad_command(command)` | eval from_device="$from_device$" | eval to_device="$to_device$" | eval all_link_group="$all_link_group$" | inputlookup append=t all_link_annotations | stats first(annotation) as annotation by command all_link_group from_device to_device | outputlookup all_link_annotations

# lookup_all_link_group_annotation
# -----------------------------
# Lookup the all-link annotation and output it
#
[lookup_all_link_group_annotation(3)]
args       = output_field,from_device,to_device
definition = `unpad_command(cmd1)` | lookup all_link_annotations from_device as $from_device$ to_device as $to_device$ all_link_group command as cmd1 OUTPUTNEW annotation as $output_field$

[lookup_all_link_group_annotation(2)]
args       = output_field,from_device
definition = `unpad_command(cmd1)` | lookup all_link_annotations from_device as $from_device$ all_link_group command as cmd1 OUTPUTNEW annotation as temp_annotation to_device as temp_to_device | fillnull temp_to_device value="" | eval $output_field$=if((temp_to_device = "" OR isnull(temp_to_device)) AND NOT isnull(temp_annotation),temp_annotation,$output_field$)


# populate_field_with_all_link_group_number
# -----------------------------
# populate field with all-link group information
#
[populate_field_with_all_link_group_number(2)]
args       = output_field,default_value_field
definition = | eval $output_field$=case(all_link=1 AND (broadcast=1 OR isnull(to)),"group: ".all_link_group, all_link=1, to." (group: ".all_link_group.")", NOT all_link=1, $default_value_field$)

[populate_field_with_all_link_group_number]
args       = output_field,default_value_field
definition = `populate_field_with_all_link_group_number(to,to)`

# get_status
# -----------------------------
# populate a field that outlines the status of the event
#
[get_status]
definition = | eval status=case(ack=1,"ack",nack=1,"nack")

# pad_command
# -----------------------------
# pad the command so that it contains the leading zero ("6" would become "06")
#
[pad_command(1)]
args       = command
definition = | eval $command$=if(len($command$)==1,"0".$command$, $command$)

# unpad_command
# -----------------------------
# unpad the command so that it contains the leading zero ("6" would become "06")
#
[unpad_command(1)]
args       = command
definition =  | eval $command$=if(substr($command$,1,1)=="0", substr($command$,2,1), $command$)

# populate_to_from_with_null
# -----------------------------
# populate the to field with "NULL" if to is null
#
[populate_to_from_with_null]
definition = | fillnull to from value=NULL | eval to=if(to="NULL",null(),to) | eval from=if(from="NULL",null(),from)

# lookup_all_link_data
# -----------------------------
# get the all-link database information
#
[lookup_all_link_data]
definition = | lookup all_link_group_records device all_link_group

# timesince
# -----------------------------
# makes a human readable description of the amount of time since a device was observed
#
[timesince(2)]
args = sourceField,destField
definition =  eval now=time() | eval $destField$ = case( $sourceField$ > now, "0 minutes ago", now-$sourceField$ > (2*86400), round((now-$sourceField$) / (86400)) . " days ago", now-$sourceField$ > (2*3600), round((now-$sourceField$) / (3600)) . " hours ago", now-$sourceField$ > (2*60), round((now-$sourceField$) / (60)) . " minutes ago", now-$sourceField$ > 60, "1 minute ago", now-$sourceField$ <= 60, "just now" ) | fields - now
iseval = 0